#include "Config.hpp"

#include <boost/foreach.hpp>
#include <boost/format.hpp>
#include <boost/algorithm/string.hpp>
#include <curses.h>
#include <cstdlib>
#include <fstream>

//DBG
#include <iostream>

using namespace std;
using namespace boost;
namespace po=boost::program_options;

namespace Bastet{
  const size_t HowManyHighScores=10;
  const std::string RcFileName="/.bastetrc";
  const std::string LocalHighScoresFileName="/.bastetscores";
  const std::string GlobalHighScoresFileName="/var/games/bastet.scores";

  Config config; //singleton instance

  Config::Config(){
    po::options_description keyMappingOpts("Key mappings");
    keyMappingOpts.add_options()
      ("Down",po::value<int>()->default_value(KEY_DOWN),"Down key")
      ("Left",po::value<int>()->default_value(KEY_LEFT),"Left key")
      ("Right",po::value<int>()->default_value(KEY_RIGHT),"Right key")
      ("RotateCW",po::value<int>()->default_value(' '),"Clockwise turn key")
      ("RotateCCW",po::value<int>()->default_value(KEY_UP),"Counterclockwise turn key")
      ("Drop",po::value<int>()->default_value(KEY_ENTER),"Drop tetromino key")
      ("Pause",po::value<int>()->default_value('p'),"Pause key")
      ;

    po::options_description highScoresOpts("High scores");
    boost::format scorer("Scorer%02d");
    boost::format score("Score%02d");
    for(size_t i=0;i<HowManyHighScores;i++){
      highScoresOpts.add_options()
	(str(scorer % i).c_str(),po::value<string>()->default_value("No one played yet"),"Name of high scorer")
	(str(score % i).c_str(),po::value<int>()->default_value(0),"High score (points)")
	;
    }
    
    ifstream ifs((getenv("HOME")+RcFileName).c_str());
    po::store(po::parse_config_file(ifs,keyMappingOpts),_options);

    ifstream ifs2((string(getenv("HOME"))+LocalHighScoresFileName).c_str());
    po::store(po::parse_config_file(ifs2,highScoresOpts),_highScores);
  }
  
  Keys Config::GetKeys(){
    Keys keys;
    keys.Down=_options["Down"].as<int>();
    keys.Left=_options["Left"].as<int>();
    keys.Right=_options["Right"].as<int>();
    keys.RotateCW=_options["RotateCW"].as<int>();
    keys.RotateCCW=_options["RotateCCW"].as<int>();
    keys.Drop=_options["Drop"].as<int>();
    keys.Pause=_options["Pause"].as<int>();
    return keys;
  }
  
  void Config::SetKeys(const Keys &keys){
    _options.insert(make_pair("Down",po::variable_value(keys.Down,false)));
    _options.insert(make_pair("Left",po::variable_value(keys.Left,false)));
    _options.insert(make_pair("Right",po::variable_value(keys.Right,false)));
    _options.insert(make_pair("RotateCW",po::variable_value(keys.RotateCW,false)));
    _options.insert(make_pair("RotateCCW",po::variable_value(keys.RotateCCW,false)));
    _options.insert(make_pair("Drop",po::variable_value(keys.Drop,false)));
    _options.insert(make_pair("Pause",po::variable_value(keys.Pause,false)));
  }

  Config::~Config(){
    /**
       The config and highscore files are written down at each game, even if it is not needed, but who cares for now
     */
    ofstream ofs((string(getenv("HOME"))+"/.bastetrc").c_str());
    ofs<<"# Automatically regenerated by the program at each run, edit at your own risk\n";
    BOOST_FOREACH(const po::variables_map::value_type &pair, _options){
      ofs<<pair.first<<" = "<<pair.second.as<int>()<<"\n";
    }
    
    ofstream ofs2((string(getenv("HOME"))+LocalHighScoresFileName).c_str());
    ofs2<<"# Do not edit this file, Bastet sees you\n";
    BOOST_FOREACH(const po::variables_map::value_type &pair, _highScores){
      if(starts_with(pair.first,"Scorer"))
	ofs2<<pair.first<<" = \""<<pair.second.as<string>()<<"\"\n";
      else
	ofs2<<pair.first<<" = "<<pair.second.as<int>()<<"\n";
    }
  }
}
